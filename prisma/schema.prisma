generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id               String           @id @default(cuid())
  email            String?          @unique
  password         String?
  resetToken       String?          @unique
  resetTokenExpiry DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  emailVerified    DateTime?
  image            String?
  name             String?          @unique
  phone            String?
  studentId        String?          @unique
  department       String?
  year             String?
  bio              String?
  points           Int              @default(0)
  
  accounts         Account[]
  sessions         Session[]
  
  // Club relationships
  ownedClubs       Club[]           @relation("ClubOwner")
  clubMemberships  ClubMember[]
  membershipRequests MembershipRequest[]
  eventRegistrations EventRegistration[]
  announcements    Announcement[]
  
  // Address relationship
  addresses        Address[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PendingUser {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  password      String
  token         String   @unique
  expires       DateTime
  createdAt     DateTime @default(now())

  @@map("pending_users")
}

model Club {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String?
  logo            String?
  category        String
  isPublic        Boolean  @default(true)
  maxMembers      Int?
  tags            String[] @default([])
  requirements    String?
  meetingSchedule String?
  contactEmail    String?
  socialLinks     Json?    // Store social links as JSON
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  ownerId     String
  owner       User     @relation("ClubOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  
  members     ClubMember[]
  events      Event[]
  announcements Announcement[]
  membershipRequests MembershipRequest[]
  
  @@map("clubs")
}

model ClubMember {
  id       String   @id @default(cuid())
  role     String   @default("member") // member, admin, moderator
  joinedAt DateTime @default(now())
  
  clubId   String
  club     Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([clubId, userId])
  @@map("club_members")
}

model Event {
  id              String   @id @default(cuid())
  title           String
  description     String?
  date            DateTime
  venue           String
  maxParticipants Int?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  clubId          String
  club            Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  
  registrations   EventRegistration[]
  
  @@map("events")
}

model EventRegistration {
  id           String   @id @default(cuid())
  registeredAt DateTime @default(now())
  attended     Boolean  @default(false)
  
  eventId      String
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([eventId, userId])
  @@map("event_registrations")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  priority  String   @default("normal") // low, normal, high, urgent
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  clubId    String
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@map("announcements")
}

model MembershipRequest {
  id        String   @id @default(cuid())
  status    String   @default("pending") // pending, approved, rejected
  message   String?  // Optional message from the user
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  clubId    String
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([clubId, userId])
  @@map("membership_requests")
}

model Address {
  id          String   @id @default(cuid())
  label       String   // e.g., "Home", "Dorm", "Work"
  street      String
  city        String
  state       String
  zipCode     String
  country     String   @default("US")
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("addresses")
}
