generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id               String           @id @default(cuid())
  email            String?          @unique
  password         String?
  resetToken       String?          @unique
  resetTokenExpiry DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  emailVerified    DateTime?
  image            String?
  name             String?          @unique
  phone            String?
  accounts         Account[]
  addresses        addresses[]
  cart_items       cart_items[]
  orders           orders[]
  sessions         Session[]
  wishlist_items   wishlist_items[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PendingUser {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  password      String
  token         String   @unique
  expires       DateTime
  createdAt     DateTime @default(now())

  @@map("pending_users")
}

model addresses {
  id                                         String   @id
  userId                                     String
  name                                       String
  street                                     String
  city                                       String
  state                                      String
  zipCode                                    String
  country                                    String
  isDefault                                  Boolean  @default(false)
  createdAt                                  DateTime @default(now())
  updatedAt                                  DateTime
  users                                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders_orders_billingAddressIdToaddresses  orders[] @relation("orders_billingAddressIdToaddresses")
  orders_orders_shippingAddressIdToaddresses orders[] @relation("orders_shippingAddressIdToaddresses")
}

model cart_items {
  id        String   @id
  userId    String
  productId Int
  quantity  Int      @default(1)
  color     String
  size      String
  name      String
  price     Float
  image     String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime
  products  products @relation(fields: [productId], references: [id])
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, color, size])
}

model order_items {
  id        String   @id
  orderId   String
  productId Int
  name      String
  price     Float
  quantity  Int
  color     String
  size      String
  image     String
  type      String
  orders    orders   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  products  products @relation(fields: [productId], references: [id])
}

model orders {
  id                                            String        @id
  userId                                        String
  orderNumber                                   String        @unique
  status                                        String        @default("pending")
  total                                         Float
  shippingFee                                   Float         @default(0)
  tax                                           Float         @default(0)
  shippingAddressId                             String?
  billingAddressId                              String?
  paymentMethod                                 String?
  paymentStatus                                 String        @default("pending")
  notes                                         String?
  createdAt                                     DateTime      @default(now())
  updatedAt                                     DateTime
  order_items                                   order_items[]
  addresses_orders_billingAddressIdToaddresses  addresses?    @relation("orders_billingAddressIdToaddresses", fields: [billingAddressId], references: [id])
  addresses_orders_shippingAddressIdToaddresses addresses?    @relation("orders_shippingAddressIdToaddresses", fields: [shippingAddressId], references: [id])
  users                                         User          @relation(fields: [userId], references: [id])
}

model products {
  id             Int              @id @default(autoincrement())
  name           String
  price          Float
  description    String?
  images         String[]
  colors         Json?
  sizes          String[]
  type           String
  category       String
  isNew          Boolean          @default(false)
  isBestseller   Boolean          @default(false)
  rating         Float            @default(0)
  reviews        Int              @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  cart_items     cart_items[]
  order_items    order_items[]
  wishlist_items wishlist_items[]
}

model wishlist_items {
  id        String   @id
  userId    String
  productId Int
  createdAt DateTime @default(now())
  products  products @relation(fields: [productId], references: [id])
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}
