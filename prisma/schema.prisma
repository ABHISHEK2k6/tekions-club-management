// 1. GENERATOR: Tells Prisma what code to generate
generator client {
  provider = "prisma-client-js" // Generate JavaScript client
}

// 2. DATASOURCE: Where your database lives
datasource db {
  provider  = "postgresql" // PostgreSQL database
  url       = env("DATABASE_URL") // Connection string from .env file
  directUrl = env("DIRECT_URL") // Direct connection URL (bypassing pooling)
}

// 3. MODELS: These become tables in your database

// Users table - stores basic user info
// model User {
//   id        String    @id @default(cuid())
//   email     String    @unique
//   username  String    @unique
//   password  String
//   createdAt     DateTime  @default(now())      // Auto-set when created
//   updatedAt     DateTime  @updatedAt           // Auto-update when modified
// }

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime? 
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
